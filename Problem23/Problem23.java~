import java.io.*;
import java.util.*;



public class Problem23 {
  
  private static int[] abund;
  
  public static void go() {
    
    abund = new int[6965];
    int cur = 0;
    for (int i=0; i<28124; i++) {
      if (sumDivs(i) > i) {
        abund[cur] = i;
        cur++;
      //  System.out.println(i + " " + sumDivs(i));
      }
    }
   // System.out.println(cur);
    
    int[][] sums = new int[6965][6965];
    
    
    for (int i=0; i<6965; i++) {
      for (int j=0; j<6965; j++) {
        sums[i][j] = abund[i] + abund[j];
        
      }
    }
    
    long sum = 0;
    for (int i=0; i<28123; i++) {
      if (!presentInMatrix(sums, i))
        System.out.println(i);
        sum += i;
    }
    System.out.println(sum);
     
  }
  
  public static Boolean presentInMatrix(int[][] matrix, int num) {
    int i = 0; int j = 0;
  //  Boolean done = false;
    
    while (i < 6965) {
      int cur = matrix[i][j];
      if (cur == num)
        return true;
      if (cur > num)
        return false;
      i++;
      j++; j = j % 6965;
    }
    return false;
  }
  
  public static int sumDivs(int num) {
    if (num == 0 || num == 1)
      return 0;
    else {
      int sum = 1;
      int stop = (int) Math.sqrt(num);
      if (stop * stop == num)
        sum -= (1 * stop);
      for (int i=2; i<=stop; i++) {
        if (num % i == 0) {
          sum += i;
          sum += num / i;
        }
      }
      return sum;
    }
  }
  
//  public static void printArray(int[] array) {
    
  
  public static void main(String[] args) {  go(); }
  
}